name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller (Linux/macOS)
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            OS_NAME="linux"
          else
            OS_NAME="macos"
          fi

          EXECUTABLE_NAME="${OS_NAME}_rpc-bridge_${{ github.ref_name }}"
          echo "Building executable with name: $EXECUTABLE_NAME"

          pyinstaller \
            --onefile \
            --name $EXECUTABLE_NAME \
            --hidden-import=jinja2.runtime \
            --hidden-import=markdown_checklist.extension \
            --add-data="templates/*:templates/" \
            --add-data="static/*:static/" \
            --add-data="static/img/*:static/img/" \
            --add-data="static/js/*:static/js" \
            --add-data="doc_images/*:doc_images/" \
            --add-data="README.md:." \
            rpc_bridge_server.py

      - name: Build with PyInstaller (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: powershell
        run: |
          $EXECUTABLE_NAME = "windows_rpc-bridge_${{ github.ref_name }}.exe"
          Write-Host "Building executable with name: $EXECUTABLE_NAME"

          pyinstaller --onefile `
            --name $EXECUTABLE_NAME `
            --hidden-import=jinja2.runtime `
            --hidden-import=markdown_checklist.extension `
            --add-data="templates/*;templates/" `
            --add-data="static/*;static/" `
            --add-data="static/img/*;static/img/" `
            --add-data="static/js/*;static/js" `
            --add-data="doc_images/*;doc_images/" `
            --add-data="README.md;." `
            rpc_bridge_server.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: executable-windows-latest
          path: ./windows/

      - name: Download all artifacts (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: executable-ubuntu-latest
          path: ./ubuntu/

      - name: Download all artifacts (MacOS)
        uses: actions/download-artifact@v4
        with:
          name: executable-macos-latest
          path: ./macos/

      - name: Set prerelease flag
        id: prerelease
        run: |
          if [[ "${{ github.ref_name }}" =~ alpha$ || "${{ github.ref_name }}" =~ beta$ ]]; then
            echo "PRERELEASE=true" >> $GITHUB_ENV
            echo "MAKE_LATEST=false" >> $GITHUB_ENV
            echo "Creating a prerelease"
          else
            echo "PRERELEASE=false" >> $GITHUB_ENV
            echo "MAKE_LATEST=true" >> $GITHUB_ENV
            echo "Creating a stable release"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ env.PRERELEASE }}
          make_latest: ${{ env.MAKE_LATEST }}
          files: |
            ubuntu/linux_*
            windows/windows_*.exe
            macos/macos_*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
